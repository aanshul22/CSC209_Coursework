Script started on 2021-02-23 13:09:16+05:30 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="120" LINES="25"]
]0;xruvix@Xruvix-Rig: /mnt/c/Users/aansh/Dropbox/Year2/CSC209/agraw143/lab6[01;32mxruvix@Xruvix-Rig[00m:[01;34m/mnt/c/Users/aansh/Dropbox/Year2/CSC209/agraw143/lab6[00m$ gdb ./overflow
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./overflow[m...
(gdb) list
1	#include <stdio.h>
2	
3	#define SIZE 4
4	#define OVERFLOW 5
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
(gdb) 
11	    int after[SIZE] = {10, 10, 10, 10};
12	
13	    printf("Address of the variables:\n");
14	    for (index = 0; index < SIZE; index++) {
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16	    }
17	    for (index = 0; index < SIZE; index++) {
18	        printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19	    }
20	    for (index = 0; index < SIZE; index++) {
(gdb) 
21	        printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22	    }
23	    printf("%lx -> &i\n", (unsigned long)&i);
24	    printf("%lx -> &index\n", (unsigned long)&index);
25	    printf("\n");
26	
27	
28	    printf("Initial values:\n");
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) 
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
42	    }
43	
44	    return 0;
45	}
(gdb) break 33
Breakpoint 1 at [34m0x13c2[m: file [32moverflow.c[m, line 33.
(gdb) break 36
Breakpoint 2 at [34m0x13cc[m: file [32moverflow.c[m, line 36.
(gdb) run
Starting program: /mnt/c/Users/aansh/Dropbox/Year2/CSC209/agraw143/lab6/overflow 
Address of the variables:
7fffffffdb10 -> &after[0]
7fffffffdb14 -> &after[1]
7fffffffdb18 -> &after[2]
7fffffffdb1c -> &after[3]
7fffffffdb00 -> &a[0]
7fffffffdb04 -> &a[1]
7fffffffdb08 -> &a[2]
7fffffffdb0c -> &a[3]
7fffffffdaf0 -> &before[0]
7fffffffdaf4 -> &before[1]
7fffffffdaf8 -> &before[2]
7fffffffdafc -> &before[3]
7fffffffdaec -> &i
7fffffffdae8 -> &index

Initial values:
i = 32767
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}

Breakpoint 1, [33mmain[m () at [32moverflow.c[m:33
33	    printf("\n");
(gdb) display before
1: before = {10, 10, 10, 10}
(gdb) display a
2: a = {0, 0, 0, 0}
(gdb) display after
3: after = {10, 10, 10, 10}
(gdb) continue
Continuing.


Breakpoint 2, [33mmain[m () at [32moverflow.c[m:36
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 0, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 0, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 0}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: before = {10, 10, 10, 10}
2: a = {0, 10, 20, 30}
3: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) [34m0x7fffffffdb10[m
(gdb) print &(a[4])
$2 = (int *) [34m0x7fffffffdb10[m
(gdb) q
A debugging session is active.

	Inferior 1 [process 1048] will be killed.

Quit anyway? (y or n) y
]0;xruvix@Xruvix-Rig: /mnt/c/Users/aansh/Dropbox/Year2/CSC209/agraw143/lab6[01;32mxruvix@Xruvix-Rig[00m:[01;34m/mnt/c/Users/aansh/Dropbox/Year2/CSC209/agraw143/lab6[00m$ exit
exit

Script done on 2021-02-23 13:10:40+05:30 [COMMAND_EXIT_CODE="0"]
